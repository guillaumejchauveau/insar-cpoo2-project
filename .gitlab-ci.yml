workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
  - build
  - check
  - report
  - publish
  - deploy
  - cleanup

variables:
  MAVEN_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/maven:3.8-openjdk-11"
  NODE_CHROME_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/node-chrome"
  OPENJDK_SCHEMATHESIS_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/openjdk-schemathesis"
  SWAGGER_CODEGEN_CLI_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/swagger-codegen-cli"
  CHECKSTYLE_REPORT_CODECLIMATE_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/checkstyle-report-codeclimate"
  DOCKER_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/docker:20.10"
  DOCKER_DIND_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/docker:20.10-dind"
  AUTO_DEPLOY_IMAGE_VERSION: 'v2.12.0'

api:build:
  stage: build
  image:
    name: $SWAGGER_CODEGEN_CLI_IMAGE
    entrypoint: [""]
  tags:
    - ci
  script:
    - java -jar /opt/swagger-codegen-cli/swagger-codegen-cli.jar generate -l openapi -i openapi.yml
  artifacts:
    paths:
      - openapi.json

include:
  - /.gitlab-ci.back.yml
  - /.gitlab-ci.front.yml

# Procedure used to log into GitLab's container registry.
.docker-login-script: &docker-login-script
  - |
    if [[ -n "$CI_REGISTRY" && -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging in to GitLab Container Registry with CI credentials..."
      echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    fi

# All images used in this workflow are registered to GitLab's container registry
# in order to mitigate Docker Hub pull limitations. This job automatically pulls
# and registers the required images to the local registry.
register-images:
  image: docker:20.10
  services:
    - docker:20.10-dind
  tags:
    - ci
  stage: .pre
  script:
    - *docker-login-script
    - docker pull docker:20.10
    - docker tag docker:20.10 $DOCKER_IMAGE
    - docker push $DOCKER_IMAGE
    - docker pull docker:20.10-dind
    - docker tag docker:20.10-dind $DOCKER_DIND_IMAGE
    - docker push $DOCKER_DIND_IMAGE
    - docker pull maven:3.8-openjdk-11
    - docker tag maven:3.8-openjdk-11 $MAVEN_IMAGE
    - docker push $MAVEN_IMAGE
    - docker pull swaggerapi/swagger-codegen-cli-v3
    - docker tag swaggerapi/swagger-codegen-cli-v3 $SWAGGER_CODEGEN_CLI_IMAGE
    - docker push $SWAGGER_CODEGEN_CLI_IMAGE
    - docker pull guillaumejchauveau/checkstyle-report-codeclimate
    - docker tag guillaumejchauveau/checkstyle-report-codeclimate $CHECKSTYLE_REPORT_CODECLIMATE_IMAGE
    - docker push $CHECKSTYLE_REPORT_CODECLIMATE_IMAGE
    - docker build -t $NODE_CHROME_IMAGE node-chrome
    - docker push $NODE_CHROME_IMAGE
    - docker build -t $OPENJDK_SCHEMATHESIS_IMAGE openjdk-schemathesis
    - docker push $OPENJDK_SCHEMATHESIS_IMAGE
  when: manual

####
# The following GitLab CI configuration is responsible for the Continuous
# Deployment of this project. It is inspired by GitLab's AutoBuild and
# AutoDeploy templates.
#
# For both game-backend and game-frontend, images are published to the GitLab
# registry. There is one image (for each) per git branch, named for example
# `backend/master`, and one image for all git tags (ex: `backend:D2`).
####

# Procedure used to identify the image name and tag from the VCS context.
# We want to keep different version of the published images depending on the
# branch, tag...
.image-vars-script: &image-vars-script
  - |
    if [[ -z "$CI_COMMIT_TAG" ]]; then
      export BACKEND_IMAGE=$CI_REGISTRY_IMAGE/backend/$CI_COMMIT_REF_SLUG
      export FRONTEND_IMAGE=$CI_REGISTRY_IMAGE/frontend/$CI_COMMIT_REF_SLUG
      export IMAGE_TAG=$CI_COMMIT_SHA
    else
      export BACKEND_IMAGE=$CI_REGISTRY_IMAGE/backend
      export FRONTEND_IMAGE=$CI_REGISTRY_IMAGE/frontend
      export IMAGE_TAG=$CI_COMMIT_TAG
    fi

.publish-job:
  image: $DOCKER_IMAGE
  services:
    - $DOCKER_DIND_IMAGE
  tags:
    - ci
  stage: publish
  before_script:
    - *docker-login-script
    - *image-vars-script

# Function used to publish an image.
# Should be called while in the directory containing the Dockerfile.
# Should be called while variables $IMAGE and $IMAGE_TAG have been set with the
# target image name and tag.
.publish-script: &publish-script
  - |
    image_previous="$IMAGE:$CI_COMMIT_BEFORE_SHA"
    image_tagged="$IMAGE:$IMAGE_TAG"
    image_latest="$IMAGE:latest"
  - docker pull "$image_previous" || true
  - docker pull "$image_latest" || true
  - |
    docker build \
    --cache-from "$image_previous" --cache-from "$image_latest" \
    --tag "$image_tagged" \
    --tag "$image_latest" \
    .
  - docker push "$image_tagged"
  - docker push "$image_latest"

back:publish:
  extends: .publish-job
  # Requires the tests to pass and the JAR from the build job.
  needs:
    - job: back:verify
      artifacts: false
    - job: back:integration_test
      artifacts: false
    - job: back:build
      artifacts: true
  script:
    - IMAGE=$BACKEND_IMAGE
    - cd game-backend
    - *publish-script

front:publish:
  extends: .publish-job
  # Requires the tests to pass and the files from the build job.
  needs:
    - job: front:test
      artifacts: false
    - job: front:lint
      artifacts: false
    - job: front:build
      artifacts: true
  script:
    - IMAGE=$FRONTEND_IMAGE
    - cd game-frontend
    - *publish-script

.deploy-job:
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-deploy-image:${AUTO_DEPLOY_IMAGE_VERSION}"
  dependencies: []

# Procedure used to deploy the project to a Kubernetes cluster.
# Uses the GitLab AutoDeploy image for its utilities but manually deploys the
# project.
.deploy-script: &deploy-script
  - auto-deploy check_kube_domain
  - auto-deploy ensure_namespace
  - auto-deploy create_secret
  - *image-vars-script
  - |
    helm upgrade --install \
    --wait \
    --set image.secrets[0].name="gitlab-registry-${CI_PROJECT_PATH_SLUG}" \
    --set tls.enabled="true" \
    --set gitlab.app="$CI_PROJECT_PATH_SLUG" \
    --set gitlab.env="$CI_ENVIRONMENT_SLUG" \
    --set gitlab.envName="$CI_ENVIRONMENT_NAME" \
    --set gitlab.envURL="$CI_ENVIRONMENT_URL" \
    --set front.image.name="$FRONTEND_IMAGE" \
    --set-string front.image.tag="$IMAGE_TAG" \
    --set back.image.name="$BACKEND_IMAGE" \
    --set-string back.image.tag="$IMAGE_TAG" \
    --namespace="$KUBE_NAMESPACE" \
    "$CI_ENVIRONMENT_SLUG" \
    chart/

review:
  tags:
    - review
  extends: .deploy-job
  stage: deploy
  script:
    - *deploy-script
    - auto-deploy persist_environment_url
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG.$KUBE_INGRESS_BASE_DOMAIN
    on_stop: stop_review
  artifacts:
    paths: [environment_url.txt]
    when: always
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: never
    - if: '$REVIEW_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID'

stop_review:
  tags:
    - review
  extends: .deploy-job
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - |
      if [[ -n "$(helm ls --namespace "$KUBE_NAMESPACE" -q -f "^$CI_ENVIRONMENT_SLUG$" --failed --pending --deployed)" ]]; then
        helm delete "$CI_ENVIRONMENT_SLUG" --namespace "$KUBE_NAMESPACE"
      fi
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  allow_failure: true
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: never
    - if: '$REVIEW_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_MERGE_REQUEST_IID'
      when: manual

staging:
  tags:
    - staging
  extends: .deploy-job
  stage: deploy
  script:
    - *deploy-script
  environment:
    name: staging
    url: https://$CI_ENVIRONMENT_SLUG.$KUBE_INGRESS_BASE_DOMAIN
  rules:
    - if: '$CI_KUBERNETES_ACTIVE == null || $CI_KUBERNETES_ACTIVE == ""'
      when: never
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      when: never
    - if: '$STAGING_ENABLED'
