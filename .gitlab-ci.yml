stages:
  - build
  - check
  - report
  - publish
  - deploy
  - cleanup

variables:
  MAVEN_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/maven:3.8-openjdk-11"
  NODE_CHROME_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/node-chrome:16"
  BACK_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/game-backend:$CI_COMMIT_REF_SLUG"
  FRONT_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/game-frontend:$CI_COMMIT_REF_SLUG"

pull-images:
  stage: .pre
  image: docker:20.10
  tags:
    - ci
  services:
    - docker:20.10-dind
  before_script:
    - docker info
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull maven:3.8-openjdk-11 && docker tag maven:3.8-openjdk-11 $MAVEN_IMAGE
    - docker build -t $NODE_CHROME_IMAGE node-chrome
    - docker push $MAVEN_IMAGE
    - docker push $NODE_CHROME_IMAGE
  when: manual

back:build:
  stage: build
  image: $MAVEN_IMAGE
  tags:
    - ci
  before_script:
    - cd game-backend
  script:
    - mvn -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository compile
  artifacts:
    paths:
      - game-backend/target/*.jar
    expire_in: 1 hour
  cache:
    paths:
      - $CI_PROJECT_DIR/.m2/repository/

front:build:
  stage: build
  image: $NODE_CHROME_IMAGE
  tags:
    - ci
  before_script:
    - cd game-frontend
  script:
    - npm install
    - npm run ng build -- --prod --build-optimizer
    - cp Dockerfile dist/game-frontend/
  artifacts:
    paths:
      - game-frontend/dist/game-frontend/*
  cache:
    key:
      files:
        - game-frontend/package-lock.json
    paths:
      - game-frontend/node_modules/

back:test:
  stage: check
  image: $MAVEN_IMAGE
  tags:
    - ci
  needs:
    - back:build
  before_script:
    - cd game-backend
  script:
    - mvn -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository test
  artifacts:
    paths:
      - game-backend/target/surefire-reports/TEST-*.xml
      - game-backend/target/site/jacoco/jacoco.xml
  cache:
    paths:
      - $CI_PROJECT_DIR/.m2/repository/
    policy: pull

front:test:
  stage: check
  image: $NODE_CHROME_IMAGE
  tags:
    - ci
  needs:
    - front:build
  before_script:
    - cd game-frontend
  script:
    - npm run ng test -- --code-coverage --watch=false --browsers=GitlabHeadlessChrome --reporters=junit
  artifacts:
    paths:
      - game-frontend/tests/junit-test-results.xml
      - game-frontend/coverage/cobertura.xml
  cache:
    key:
      files:
        - game-frontend/package-lock.json
    paths:
      - game-frontend/node_modules/
    policy: pull

back:report:
  stage: report
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  tags:
    - ci
  needs:
    - back:test
  before_script:
    - cd game-backend
  script:
    # convert report from jacoco to cobertura, using relative project path
    - python /opt/cover2cover.py target/site/jacoco/jacoco.xml src/main/java/ > target/site/cobertura.xml
  artifacts:
    reports:
      junit: game-backend/target/surefire-reports/TEST-*.xml
      cobertura: game-backend/target/site/cobertura.xml

front:report:
  stage: report
  tags:
    - ci
  needs:
    - front:test
  variables:
    GIT_STRATEGY: none
  script:
    - cd game-frontend
  artifacts:
    reports:
      junit: game-frontend/tests/junit-test-results.xml
      cobertura: game-frontend/coverage/cobertura.xml

back:publish:
  stage: publish
  image: docker:20.10
  tags:
    - ci
  services:
    - docker:20.10-dind
  needs:
    - back:build
  before_script:
    - cd game-backend
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $BACK_IMAGE .
    - docker push $BACK_IMAGE

front:publish:
  stage: publish
  image: docker:20.10
  tags:
    - ci
  services:
    - docker:20.10-dind
  needs:
    - front:build
  before_script:
    - cd game-frontend/dist/game-frontend
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $FRONT_IMAGE .
    - docker push $FRONT_IMAGE

review:
  stage: deploy
  tags:
    - review
  script:
    - echo "review"
    #- check_kube_domain
    #- install_dependencies
    #- download_chart
    #- ensure_namespace
    #- initialize_tiller
    #- create_secret
    #- deploy
  #- persist_environment_url
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_PATH_SLUG-$CI_ENVIRONMENT_SLUG.$AUTO_DEVOPS_DOMAIN
    on_stop: stop_review
  artifacts:
    paths: [environment_url.txt]
  only:
    refs:
      - branches
    kubernetes: active
  except:
    refs:
      - master
    variables:
      - $REVIEW_DISABLED

stop_review:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - echo "stop_review"
    #- install_dependencies
    #- initialize_tiller
    #- delete
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active
  except:
    refs:
      - master
    variables:
      - $REVIEW_DISABLED

staging:
  stage: deploy
  tags:
    - staging
  script:
    - echo "staging"
    #- check_kube_domain
    #- install_dependencies
    #- download_chart
    #- ensure_namespace
    #- initialize_tiller
    #- create_secret
    #- deploy
  environment:
    name: staging
    url: http://$CI_PROJECT_PATH_SLUG-staging.$AUTO_DEVOPS_DOMAIN
  only:
    refs:
      - master
    kubernetes: active
    variables:
      - $STAGING_ENABLED
