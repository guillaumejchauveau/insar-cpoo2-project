stages:
  - build
  - check
  - report
  - publish
  - deploy
  - cleanup

include:
  - /.gitlab-ci.back.yml
  - /.gitlab-ci.front.yml

variables:
  MAVEN_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/maven:3.8-openjdk-11"
  NODE_CHROME_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/node-chrome:16"
  BACK_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/game-backend"
  FRONT_IMAGE: "$CI_REGISTRY/$CI_PROJECT_PATH/game-frontend"

.registry-job: &registry-job
  image: docker:20.10
  tags:
    - ci
  services:
    - docker:20.10-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi

pull-images:
  <<: *registry-job
  stage: .pre
  script:
    - docker pull maven:3.8-openjdk-11 && docker tag maven:3.8-openjdk-11 $MAVEN_IMAGE
    - docker build --pull -t $NODE_CHROME_IMAGE node-chrome
    - docker push $MAVEN_IMAGE
    - docker push $NODE_CHROME_IMAGE
  when: manual

back:publish:
  <<: *registry-job
  stage: publish
  needs:
    - job: back:test
      artifacts: false
    - job: back:build
      artifacts: true
  script:
    - docker build --pull -t "$BACK_IMAGE${tag}" game-backend
    - docker push "$BACK_IMAGE${tag}"

front:publish:
  <<: *registry-job
  stage: publish
  needs:
    - job: front:test
      artifacts: false
    - job: front:build
      artifacts: true
  script:
    - docker build --pull -t "$FRONT_IMAGE${tag}" game-frontend
    - docker push "$FRONT_IMAGE${tag}"

review:
  stage: deploy
  tags:
    - review
  script:
    - echo "review"
    #- check_kube_domain
    #- install_dependencies
    #- download_chart
    #- ensure_namespace
    #- initialize_tiller
    #- create_secret
    #- deploy
  #- persist_environment_url
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_PATH_SLUG-$CI_ENVIRONMENT_SLUG.$AUTO_DEVOPS_DOMAIN
    on_stop: stop_review
  artifacts:
    paths: [environment_url.txt]
  only:
    refs:
      - branches
    kubernetes: active
  except:
    refs:
      - master
    variables:
      - $REVIEW_DISABLED

stop_review:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
  script:
    - echo "stop_review"
    #- install_dependencies
    #- initialize_tiller
    #- delete
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active
  except:
    refs:
      - master
    variables:
      - $REVIEW_DISABLED

staging:
  stage: deploy
  tags:
    - staging
  script:
    - echo "staging"
    #- check_kube_domain
    #- install_dependencies
    #- download_chart
    #- ensure_namespace
    #- initialize_tiller
    #- create_secret
    #- deploy
  environment:
    name: staging
    url: http://$CI_PROJECT_PATH_SLUG-staging.$AUTO_DEVOPS_DOMAIN
  only:
    refs:
      - master
    kubernetes: active
    variables:
      - $STAGING_ENABLED
